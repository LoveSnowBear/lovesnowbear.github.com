<?xml version="1.0" encoding="UTF-8"?>
<view>
	<Datasets>
		<Dataset type="Form" id="datasetCondition">
			<MasterLink />
			<Fields>
				<Field name="employee_name" label="姓名(Like)">
					<Properties />
				</Field>
				<Field name="dept_id" dataType="">
					<Properties />
				</Field>
				<Field name="dept_name" dropDown="dropdownDept" label="部门(=)">
					<Properties />
				</Field>
				<Field name="sex" label="性别(=)">
					<Properties />
				</Field>
				<Field name="married" label="婚否(=)">
					<Properties />
				</Field>
				<Field name="salary1" label="薪水(&gt;=)" dataType="int">
					<Properties />
				</Field>
				<Field name="salary2" label="薪水(&lt;=)" dataType="int">
					<Properties />
				</Field>
				<Field name="birthday1" label="生日(&gt;=)" dataType="date" format="yyyyMMdd">
					<Properties />
				</Field>
				<Field name="birthday2" label="生日(&lt;=)" dataType="date" format="yyyyMMdd">
					<Properties />
				</Field>
			</Fields>
			<Parameters />
			<Properties />
		</Dataset>
		<Dataset sourceDataset="datasetEmployee" type="Reference" conditionDataset="datasetCondition" async="true" id="datasetEmployee" sourceModule="sample.HR" readOnly="true" showLoadingTip="true" pageSize="20">
			<MasterLink />
			<Fields>
				<Field name="employee_id" dataType="string">
					<Properties />
				</Field>
				<Field name="EMPLOYEE_NAME" dataType="string">
					<Properties />
				</Field>
				<Field name="dept_id" dataType="string">
					<Properties />
				</Field>
				<Field name="sex" dropDown="dropdownSex" dataType="boolean">
					<Properties />
				</Field>
				<Field name="married" dataType="boolean">
					<Properties />
				</Field>
				<Field name="birthday" dataType="date">
					<Properties />
				</Field>
				<Field name="salary" dataType="double">
					<Properties />
				</Field>
				<Field lookupField="dept_name" lookupKeyFields="dept_id" type="Lookup" keyFields="dept_id" label="${Resource.hr.dept_name}" dataType="" lookupModule="sample.HR" lookupDataset="datasetDeptForLookup" name="dept_name">
					<Properties />
				</Field>
			</Fields>
			<Parameters />
			<Properties />
			<Events />
		</Dataset>
	</Datasets>
	<Controls>
		<Control type="DynamicDropDown" startWithEmptyRecord="true" writeFields="dept_id,dept_name" visibleFields="dept_name" filterParameter="dept_name" id="dropdownDept" width="200" readFields="dept_id,dept_name">
			<Dataset sourceDataset="datasetDept" type="DropDown" sourceModule="sample.HR" pageSize="100">
				<Fields />
				<Parameters />
				<Properties />
			</Dataset>
			<Parameters />
		</Control>
		<Control autoDropDown="true" id="dropdownSex" mapValue="true" fixed="true" type="ListDropDown">
			<DropDownItem label="&lt;忽略&gt;" />
			<DropDownItem label="男" value="true" />
			<DropDownItem label="女" value="false" />
		</Control>
		<Control autoDropDown="true" id="dropdownMarried" mapValue="true" fixed="true" type="ListDropDown">
			<DropDownItem label="&lt;忽略&gt;" />
			<DropDownItem label="已婚" value="true" />
			<DropDownItem label="未婚" value="false" />
		</Control>
		<Control id="buttonQuery" width="100" command="commandQuery" type="Button" value="查询[Q]" />
		<Control id="commandQuery" async="true" queryDataset="datasetEmployee" type="QueryCommand" conditionDataset="datasetCondition">
			<Parameters />
			<Events>
				<Event name="beforeExecute">var employee_name = datasetCondition.getValue("employee_name");
if (employee_name) {
  command.parameters().setValue("employee_name", "%" + employee_name + "%");
}
else {
  command.parameters().setValue("employee_name", "");
}</Event>
			</Events>
		</Control>
		<Control type="AutoForm" dataset="datasetCondition" id="formCondition" width="100%">
			<FormGroup showBevel="false" labelWidth="80" title="查询条件">
				<Element name="dept_name" type="TextEditor" field="dept_name">
					<FieldLabel />
					<TextEditor />
				</Element>
				<Element name="employee_name" type="TextEditor" field="employee_name">
					<FieldLabel />
					<TextEditor />
				</Element>
				<Element name="sex" type="TextEditor" field="sex">
					<FieldLabel />
					<TextEditor dropDown="dropdownSex" />
				</Element>
				<Element name="married" type="TextEditor" field="married">
					<FieldLabel />
					<TextEditor dropDown="dropdownMarried" />
				</Element>
				<Element name="salary1" type="TextEditor" field="salary1">
					<FieldLabel />
					<TextEditor />
				</Element>
				<Element name="salary2" type="TextEditor" field="salary2">
					<FieldLabel />
					<TextEditor />
				</Element>
				<Element name="birthday1" type="TextEditor" field="birthday1">
					<FieldLabel />
					<TextEditor />
				</Element>
				<Element name="birthday2" type="TextEditor" field="birthday2">
					<FieldLabel />
					<TextEditor />
				</Element>
			</FormGroup>
		</Control>
		<Control id="pilotEmployee" dataset="datasetEmployee" maxLink="10" type="PagePilot" />
		<Control type="DataTable" showHScrollBar="false" dataset="datasetEmployee" height="100%" id="tableEmployee" width="100%">
			<Column field="employee_id" name="employee_id" />
			<Column field="employee_name" name="employee_name" />
			<Column field="dept_name" width="150" name="dept_name" />
			<Column field="sex" name="sex" />
			<Column field="married" editorType="checkbox" name="married" />
			<Column field="birthday" width="120" name="birthday" />
			<Column field="salary" name="salary" />
			<Events />
		</Control>
		<Control type="SubWindow" height="200" id="subwindowCondition" width="500" status="hidden" title="查询条件">
			<Events>
				<Event name="afterShow">formCondition_editor_dept_name.focus();</Event>
			</Events>
		</Control>
		<Control id="buttonShowCondition" width="100" type="Button" value="数据过滤[A]">
			<Events>
				<Event name="onClick">subwindowCondition.show(false,true);
</Event>
			</Events>
		</Control>
		<Control id="buttonCloseCondition" width="100" type="Button" value="关闭[Z]">
			<Events>
				<Event name="onClick">subwindowCondition.hide();
</Event>
			</Events>
		</Control>
		<Control id="buttonClear" width="100" type="Button" value="清空[S]">
			<Events>
				<Event name="onClick">datasetCondition.clearData();
datasetCondition.insertRecord();
</Event>
			</Events>
		</Control>
	</Controls>
	<Properties />
	<Events>
		<Event name="functions">//---------------------------------------------------------------
/**
 * 快捷键资源的抽象
 * @param cfg {altKey:false,ctrlKey:false,shiftKey:false,key:8}
 *            {altKey:false,ctrlKey:true,shiftKey:false,key:'n'}
 */
function ShortcutKey(cfg){
  this.ctrlKey=cfg.ctrlKey;
  this.shiftKey=cfg.shiftKey;
  this.altKey=cfg.altKey;
  var key=cfg.key;
  if(typeof key=='number' || !isNaN(key)){
    this.keyCode=key;
  }else{
    this.keyCode=key.toUpperCase().charCodeAt(0);
  }
}
//按键动作的JavaScript类
function KeyAction(shortupkey,fn){
  this.shortupkey=shortupkey;
  this.fn=fn;
};
//获得唯一码
KeyAction.getHashCode=function(ka){
  var a=["@"],ce=ka.shortupkey || ka;
  a.push((ce.altKey)?"1":"0");
  a.push((ce.ctrlKey)?"1":"0");
  a.push((ce.shiftKey)?"1":"0");
  a.push(ce.keyCode);
  //Debugger.log("Config:{altKey:"+ce.altKey+";ctrlKey:"+ce.ctrlKey+";shiftKey:"+ce.shiftKey+";keyCode:"+ce.keyCode+"}");
  return a.join("");
};
//禁止历史后退键
KeyAction.forbidHistoryBack=function(evt){
  var evt=evt||window.event;
  var el=evt.srcElement||evt.target;
  var els=el.tagName + "$" + el.type;
  var passstr="INPUT$text,TEXTAREA$textarea";
  if(passstr.indexOf(els)&gt;=0){
    throw {EvtGoon:true,msg:"EvtGoon."};
  }
};
//停止时间冒泡和默认动作
KeyAction.stopEvent=function(evt){
  if(evt.preventDefault){
    evt.preventDefault();
    evt.stopPropagation();
  }else{
    evt.returnValue=false;
    evt.cancelBubble=true;
  }
};
KeyAction.kaMap={};
//初始化
KeyAction.init=function(kaTable){
  var ka,kach,map=KeyAction.kaMap;
  for(var i=0,l=kaTable.length; i&lt;l ;i++){
    ka=kaTable[i];
    kahc=KeyAction.getHashCode(ka);
    map[kahc]=ka;
  }
  EventManager.removeSystemEvent(document,"onkeydown",KeyAction.onkeydownHandler);
  EventManager.addSystemEvent(document,"onkeydown",KeyAction.onkeydownHandler);    
};
//获得已经注册的KeyAction
KeyAction.getAction=function(evt){
  var kahc=KeyAction.getHashCode(evt);
  return KeyAction.kaMap[kahc];
};
/**
 * 调用快捷键的方法执行后， 默认会停止事件。
 * 如果需要禁止这种行为，需要快捷键方法throw一个异常，
 * 并且异常的EvtGoon属性为true，否则该异常会被继续抛出。
 */
KeyAction.onkeydownHandler=function(evt){
  var evt=evt||window.event;
  var ka=KeyAction.getAction(evt);
  var isStop=true;
  if(ka){
    try{ ka.fn(evt); }
    catch(ex){
      if(ex.EvtGoon){isStop=false}else{throw ex};
    }finally{
      if(isStop){KeyAction.stopEvent(evt);}
    }
  }
}
//------------------------------------初始化快捷键-----------------------------------
//按键动作列表
var KeyActionTable=[
  new KeyAction(new ShortcutKey({altKey:false,ctrlKey:true,shiftKey:true,key:'a'}),
                function (){document.getElementById('buttonShowCondition').click();}),
  new KeyAction(new ShortcutKey({altKey:false,ctrlKey:true,shiftKey:true,key:'z'}),
                function (){document.getElementById('buttonCloseCondition').click();}),
  new KeyAction(new ShortcutKey({altKey:false,ctrlKey:true,shiftKey:true,key:'q'}),
                function (){document.getElementById('buttonQuery').click();}),
  new KeyAction(new ShortcutKey({altKey:false,ctrlKey:true,shiftKey:true,key:'s'}),
                function (){document.getElementById('buttonClear').click();})
]; 
KeyAction.init(KeyActionTable);</Event>
	</Events>
</view>

